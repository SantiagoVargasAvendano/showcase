<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Computación visual</title><link>https://santiagovargasavendano.github.io/showcase/docs/shortcodes/Taller-2/</link><description>Recent content on Computación visual</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://santiagovargasavendano.github.io/showcase/docs/shortcodes/Taller-2/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://santiagovargasavendano.github.io/showcase/docs/shortcodes/Taller-2/antialiasing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://santiagovargasavendano.github.io/showcase/docs/shortcodes/Taller-2/antialiasing/</guid><description>Anti-Aliasing # Planteamiento del problema # Considere un triángulo renderizado, si nos acercamos lo suficiente sobre la imagen del mismo, notaremos que los bordes del triángulo no son regulares, en cambio tiene un patrón de “escalera”, de “sierra” o de “tablero de ajedrez”. Dichos bordes que son observados, son llamados “jaggies” o bordes escalonados, y son el resultado de lo que en realidad está sucediendo, que no es más que la figura, en este caso el triángulo, se encuentra dividida en píxeles.</description></item><item><title/><link>https://santiagovargasavendano.github.io/showcase/docs/shortcodes/Taller-2/espacios/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://santiagovargasavendano.github.io/showcase/docs/shortcodes/Taller-2/espacios/</guid><description>Espacios # Planteamiento del problema # Antecedentes # Código (solución) y resultados # Código en p5.js function initPressure() { Pressure.set(&amp;#39;#uiCanvas&amp;#39;, { end: function(){ pressure = 0; }, change: function(force, event) { pressure = force; } }); Pressure.config({ polyfill: true, polyfillSpeedUp: 1000, polyfillSpeedDown: 300, preventSelect: true, only: null }); } // Brush controls let color; let brush; let easycam; let state; let drawState; let escorzo; let points; let record; var pressure = -2; let size = 1; function setup() { canvas = createCanvas(600, 450, WEBGL); canvas.</description></item></channel></rss>